let button: u32 = 0;
let brightness: u8 = 0;

do {
    match {
        EventCodeExtractor();
        U16IsEqualFilter(BUTTON_PRESSED_EVENT_CODE);
    }

    match { U32SetStateFilter(button, 1); }
}

do {
    match {
        EventCodeExtractor();
        U16IsEqualFilter(BUTTON_RELEASED_EVENT_CODE);
    }

    match { U32SetStateFilter(button, 0); }
}

do {
    match {
        EventCodeExtractor();
        U16IsEqualFilter(INTERNAL_SYSTEM_TICK_EVENT_CODE);
    }

    match { CountFilter(0, 10); }
    match { U32IsEqualStateFilter(button, 1); }
    match { U8IncrementStateFilter(brightness); }

    fire { BcmChangeBrightnessStateProducer(2, 0, brightness); }
}
